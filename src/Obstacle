package flappy;

import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Random;

import javax.imageio.ImageIO;

public class Obstacle {
	int x = 0;
	int pipeWidth = 0;
	int offset = 5;
	int windowHeight = 512; // height of the flappy doge window
	int windowWidth = 288; // height of the flappy doge window
	int floorHeight = 0; // height of the scrolling floor
	int gap = 120;
	int bottomPipeHeight = 0;

	boolean passed = false;

	Random r = new Random();

	BufferedImage topPipe = null;
	{
		try {
			topPipe = ImageIO.read(new File("toppipe.png"));
		} catch (IOException e1) {
			e1.printStackTrace();
		}
	}

	BufferedImage bottomPipe = null;
	{
		try {
			bottomPipe = ImageIO.read(new File("bottompipe.png"));
		} catch (IOException e1) {
			e1.printStackTrace();
		}
	}

	public Obstacle(int windowWidth, int windowHeight, int x, int bottomPipeHeight, int floorHeight) {
		this.windowHeight = windowHeight;
		this.windowWidth = windowWidth;
		this.x = x;
		this.bottomPipeHeight = bottomPipeHeight;
		this.floorHeight = floorHeight;
		this.pipeWidth = bottomPipe.getWidth();
	}

	public void updatePosition() {
		if (x < -100) {
			passed = false;
			x = 378;
			setRandomY();
		}

		if (x < 50 - bottomPipe.getWidth()) {
			passed = true;
		}

		x -= offset;
	}

	public void setRandomY() {
		bottomPipeHeight = r.nextInt((windowHeight - floorHeight) / 2) + 50;
	}

	public boolean hasPassed() {
		return passed;
	}

	public int getX() {
		return this.x;
	}

	public void setX(int x) {
		this.x = x;
	}

	public int getWidth() {
		return pipeWidth;
	}

	public int getBottomPipeHeight() {
		return bottomPipeHeight;
	}

	public int getGap() {
		return gap;
	}

	public void paint(Graphics g) {

		int groundLevel = windowHeight - floorHeight;
		int bottomPipeTopLeftCorner = groundLevel - bottomPipeHeight;

		g.drawImage(topPipe, x, 0, pipeWidth + x, bottomPipeTopLeftCorner - gap, 0,
				bottomPipe.getHeight() - (bottomPipeTopLeftCorner - gap),
				pipeWidth, bottomPipe.getHeight(), null);

		g.drawImage(bottomPipe, x, bottomPipeTopLeftCorner, pipeWidth + x,
				groundLevel, 0, 0, pipeWidth, topPipe.getHeight()
						- (topPipe.getHeight() - bottomPipeHeight), null);
	}

	public boolean collides(Rectangle bounds) {
		
		int groundLevel = windowHeight - floorHeight;
		int bottomPipeTopLeftCorner = groundLevel - bottomPipeHeight;
		
		Rectangle topPipeBounds = new Rectangle(x, 0, topPipe.getWidth(),
				bottomPipeTopLeftCorner - gap);
		Rectangle bottomPipeBounds = new Rectangle(x,bottomPipeTopLeftCorner, bottomPipe.getWidth(), bottomPipe.getHeight());

		if (bottomPipeBounds.intersects(bounds)) {
			return true;
		}

		return topPipeBounds.intersects(bounds);
	}
}
